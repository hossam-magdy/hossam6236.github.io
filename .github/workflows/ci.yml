# Workflow status badge: ![](https://github.com/<OWNER>/<REPOSITORY>/workflows/<WORKFLOW_NAME>/badge.svg)
# Ref: https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow
name: CI

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build & test docker image
    runs-on: ubuntu-latest
    steps:
      - name: git clone && git checkout
        uses: actions/checkout@v2
      - name: Build docker image
        run: make ci-build
      - name: Run tests
        run: make ci-test
      # - name: Run tests
      #   run: make ci-test-coverage
      # - name: Code Coverage Report
      #   uses: devmasx/coverage-check-action@v1.2.0
      #   with:
      #     type: lcov
      #     result_path: ./coverage/lcov.info
      #     min_coverage: 70
      #     token: ${{ github.token }}

  deploy:
    name: Deploy to CloudRun
    needs: build
    runs-on: ubuntu-latest
    env:
      # To force applying "--quiet" to gcloud commands, (applying "--quiet" explicilty in some commands doesn't work!)
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1

    steps:
      - name: git clone && git checkout
        uses: actions/checkout@v2
      # Step of gcloud setup MUST be after the git checkout, as it dumps the credentials json file
      - name: Setup Google Cloud SDK (`gcloud auth login`)
        uses: google-github-actions/setup-gcloud@master
        # env:
        #   CREDENTIALS_FILE_PATH: ${{ github.workspace }}/.gac.json
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          # # to set env:GOOGLE_APPLICATION_CREDENTIALS (to path of key json file) for `firebase` in the next step
          # export_default_credentials: true
          # Ref 1: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#runner-context
          # Ref 2: https://docs.github.com/en/actions/reference/environment-variables
          credentials_file_path: ${{ runner.temp }}/.gac.json
          # project_id: ${{ secrets.GCP_PROJECT_ID }} # project ID is set in the `Makefile`
      - name: "`gcloud builds submit`: create new CloudRun build / docker image"
        run: make _gcloud-build
      - name: "`gcloud run deploy`: deploy the new build to CloudRun service"
        run: make _gcloud-deploy
